#!/usr/bin/env bun

/**
 * CAG-Chains Test Runner
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é
 */

import { $ } from 'bun'

console.log('üß™ CAG-Chains Comprehensive Test Suite')
console.log('='.repeat(60))
console.log()

async function runTests() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    const testFiles = [
      'packages/core/src/guard/PrecisionGuard.test.ts',
      'packages/core/src/visualization/SystemVisualizer.test.ts',
    ]

    const existingTests = []
    for (const testFile of testFiles) {
      try {
        await Bun.file(testFile).text()
        existingTests.push(testFile)
        console.log(`  ‚úÖ ${testFile}`)
      } catch {
        console.log(`  ‚ùå ${testFile} - –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }
    }

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${existingTests.length}/${testFiles.length}`)
    
    if (existingTests.length === 0) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
      process.exit(1)
    }

    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...')
    console.log('='.repeat(60))
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    const result = await $`bun test --timeout 30000 --verbose`.text()
    
    console.log(result)
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const lines = result.split('\n')
    const testResults = {
      passed: 0,
      failed: 0,
      total: 0
    }

    lines.forEach(line => {
      if (line.includes('‚úì') || line.includes('PASS')) {
        testResults.passed++
      } else if (line.includes('‚úó') || line.includes('FAIL')) {
        testResults.failed++
      }
    })

    testResults.total = testResults.passed + testResults.failed

    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
    console.log('='.repeat(60))
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${testResults.passed}`)
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testResults.failed}`)
    console.log(`üìä –í—Å–µ–≥–æ: ${testResults.total}`)
    
    if (testResults.total > 0) {
      const successRate = (testResults.passed / testResults.total) * 100
      console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate.toFixed(1)}%`)
      
      if (successRate >= 90) {
        console.log('\nüéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!')
      } else if (successRate >= 80) {
        console.log('\n‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ –≤ —Ü–µ–ª–æ–º —Å—Ç–∞–±–∏–ª—å–Ω–∞.')
      } else if (successRate >= 70) {
        console.log('\n‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.')
      } else {
        console.log('\nüö® –ö–†–ò–¢–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.')
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò')
    console.log('='.repeat(60))
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    try {
      console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript —Ç–∏–ø–æ–≤...')
      await $`bun run type-check`.quiet()
      console.log('  ‚úÖ –¢–∏–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã')
    } catch {
      console.log('  ‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤ —Ç–∏–ø–∞—Ö')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞
    try {
      console.log('üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (linting)...')
      await $`bun run check`.quiet()
      console.log('  ‚úÖ –ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º')
    } catch {
      console.log('  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...')
    try {
      await import('../packages/core/src/guard/PrecisionGuard.js')
      console.log('  ‚úÖ PrecisionGuard –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è')
    } catch (e) {
      console.log(`  ‚ùå PrecisionGuard: ${e}`)
    }

    try {
      await import('../packages/core/src/visualization/SystemVisualizer.js') 
      console.log('  ‚úÖ SystemVisualizer –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è')
    } catch (e) {
      console.log(`  ‚ùå SystemVisualizer: ${e}`)
    }

    try {
      await import('../packages/core/src/visualization/TerminalVisualizer.js')
      console.log('  ‚úÖ TerminalVisualizer –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è')
    } catch (e) {
      console.log(`  ‚ùå TerminalVisualizer: ${e}`)
    }

    console.log('\nüéØ –ü–û–ö–†–´–¢–ò–ï –¢–ï–°–¢–ê–ú–ò')
    console.log('='.repeat(60))
    
    const components = [
      { name: 'PrecisionGuard', hasTests: existingTests.some(f => f.includes('PrecisionGuard.test')) },
      { name: 'SystemVisualizer', hasTests: existingTests.some(f => f.includes('SystemVisualizer.test')) },
      { name: 'TerminalVisualizer', hasTests: false }
    ]

    components.forEach(component => {
      const status = component.hasTests ? '‚úÖ' : '‚ùå'
      console.log(`  ${status} ${component.name}`)
    })

    const coverage = (components.filter(c => c.hasTests).length / components.length) * 100
    console.log(`\nüìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${coverage.toFixed(1)}%`)

    if (testResults.failed === 0 && coverage >= 80) {
      console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!')
      console.log('  ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã')
      console.log('  ‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ')
      console.log('  ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
      process.exit(0)
    } else {
      console.log('\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò')
      if (testResults.failed > 0) {
        console.log(`  ‚ùå ${testResults.failed} –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤`)
      }
      if (coverage < 80) {
        console.log(`  ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ (${coverage.toFixed(1)}%)`)
      }
      process.exit(1)
    }

  } catch (error) {
    console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error) 