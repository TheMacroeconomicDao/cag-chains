import { openai } from '@ai-sdk/openai'
import { generateText } from 'ai'
import type { Task, A2AHeader, GuardDecision } from '../types/index.js'
import { generateId } from '../utils/index.js'

/**
 * PrecisionGuard - –∑–∞—â–∏—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Chain Nodes
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞—á —É–∑–∫–æ–º—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
 */
export class PrecisionGuard {
  private header: A2AHeader
  
  constructor(nodeHeader: A2AHeader) {
    if (!nodeHeader || !nodeHeader.nodeId || !nodeHeader.expertDomains) {
      throw new Error('Invalid A2A header: missing required fields')
    }
    
    this.header = nodeHeader
    console.log(`üõ°Ô∏è PrecisionGuard initialized for node ${nodeHeader.nodeId}`)
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á
   */
  async filterIncomingTask(task: Task): Promise<GuardDecision> {
    const startTime = Date.now()
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–π –∑–∞–¥–∞—á–∏
      const validationResult = this.validateTask(task)
      if (validationResult) {
        this.updateStats('rejected', 0, Date.now() - startTime)
        return validationResult
      }

      console.log(`üîç PrecisionGuard checking task: "${task.description.substring(0, 50)}..."`)
      
      const nanoPrompt = this.buildGuardPrompt(task)
      
      const result = await generateText({
        model: openai('gpt-4o-mini'),
        prompt: nanoPrompt,
        temperature: 0.1,
        maxTokens: 500
      })

      const decision = this.parseAIResponse(result.text)
      const processingTime = Date.now() - startTime
      const cost = this.calculateCost(result.usage?.totalTokens || 100)

      const guardDecision: GuardDecision = {
        ...decision,
        processingTime,
        cost
      }

      this.updateStats(decision.action, cost, processingTime)
      
      console.log(`üõ°Ô∏è PrecisionGuard decision: ${decision.action} (confidence: ${decision.confidence.toFixed(2)})`)
      
      return guardDecision
    } catch (error) {
      console.error('üö® PrecisionGuard error:', error)
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
      const fallbackDecision: GuardDecision = {
        action: 'redirect',
        confidence: 0.5,
        reasoning: `Guard error fallback: ${error instanceof Error ? error.message : 'Unknown error'}`,
        contextMatchScore: 0,
        missingCapabilities: ['error-recovery'],
        suggestedNodeType: 'oracle',
        processingTime: Date.now() - startTime,
        cost: 0
      }

      this.updateStats('redirected', 0, fallbackDecision.processingTime)
      return fallbackDecision
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–π –∑–∞–¥–∞—á–∏
   */
  private validateTask(task: Task): GuardDecision | null {
    if (!task) {
      return {
        action: 'reject',
        confidence: 1.0,
        reasoning: 'Task validation failed: null or undefined task',
        contextMatchScore: 0,
        missingCapabilities: ['valid-task'],
        processingTime: 0,
        cost: 0
      }
    }

    if (!task.description || task.description.trim().length === 0) {
      return {
        action: 'reject',
        confidence: 1.0,
        reasoning: 'Task validation failed: empty or missing description',
        contextMatchScore: 0,
        missingCapabilities: ['task-description'],
        processingTime: 0,
        cost: 0
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
    if (task.description.length > 5000) {
      task.description = task.description.substring(0, 5000) + '...'
    }

    return null
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  private updateStats(action: string, cost: number, processingTime: number): void {
    this.usageStats.totalRequests++
    this.usageStats.totalCost += cost
    this.usageStats.totalProcessingTime += processingTime

    switch (action) {
      case 'allow':
        this.usageStats.allowedRequests++
        break
      case 'reject':
        this.usageStats.rejectedRequests++
        break
      case 'redirect':
        this.usageStats.redirectedRequests++
        break
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Guard AI –º–æ–¥–µ–ª–∏
   */
  private buildGuardPrompt(task: Task): string {
    const { expertDomains, competenceMap, capabilities, guardThresholds } = this.header
    const maxCompetence = Math.max(...Object.values(competenceMap))

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ requirements
    const taskDomains = task.requirements?.domains || []
    
    return `
–¢—ã Guard –¥–ª—è –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ô —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π AI –Ω–æ–¥—ã. 

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠—Ç–∞ –Ω–æ–¥–∞ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ 65% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –µ–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ —Å–∂–∞—Ç–∞ –≤ —É–∑–∫–∏–π A2A –∑–∞–≥–æ–ª–æ–≤–æ–∫. –û–Ω–∞ –º–æ–∂–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¢–û–õ–¨–ö–û —Ç–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –µ–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.

–ö–û–ù–¢–ï–ö–°–¢ –ù–û–î–´:
ID: ${this.header.nodeId}
–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã: ${expertDomains.join(', ')}
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${capabilities.join(', ')}
–ö–∞—Ä—Ç–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: ${JSON.stringify(competenceMap)}
–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω: ${this.header.contextHash.substring(0, 16)}...
–£—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã: ${maxCompetence.toFixed(2)}

–í–•–û–î–Ø–©–ê–Ø –ó–ê–î–ê–ß–ê:
–û–ø–∏—Å–∞–Ω–∏–µ: "${task.description}"
–¢—Ä–µ–±—É–µ–º—ã–µ –¥–æ–º–µ–Ω—ã: ${taskDomains.join(', ')}
–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${task.requirements?.complexity || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ù–ï —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É ‚Üí REJECT
2. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç –æ–±—É—á–µ–Ω–∏—è/–∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ‚Üí REJECT
3. –ï—Å–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–¥—ã ‚Üí REDIRECT to oracle
4. –ï—Å–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ –≤ competenceMap ‚Üí REDIRECT
5. –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É ‚Üí ALLOW

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è ALLOW: ${guardThresholds.minConfidence}
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π REJECT –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å < ${guardThresholds.rejectBelow}

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "action": "allow" | "reject" | "redirect",
  "confidence": 0.0-1.0,
  "reasoning": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
  "contextMatchScore": 0-100,
  "missingCapabilities": ["—Å–ø–∏—Å–æ–∫", "–Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"],
  "suggestedNodeType": "—Ç–∏–ø –Ω–æ–¥—ã –¥–ª—è redirect –∏–ª–∏ null"
}
`
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è Guard
   */
  private validateAction(action: string): 'allow' | 'reject' | 'redirect' {
    if (action === 'allow' || action === 'reject' || action === 'redirect') {
      return action as 'allow' | 'reject' | 'redirect'
    }
    console.warn(`Invalid guard action: ${action}, defaulting to redirect`)
    return 'redirect'
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Guard
   */
  getGuardInfo() {
    return {
      nodeId: this.header.nodeId,
      expertDomains: this.header.expertDomains,
      capabilities: this.header.capabilities,
      thresholds: this.header.guardThresholds,
      contextHash: this.header.contextHash.substring(0, 16) + '...'
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±–µ–∑ AI (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
   */
  quickCompatibilityCheck(task: Task): { compatible: boolean; confidence: number; reason: string } {
    const requiredDomains = task.requirements?.domains || []
    const nodeDomains = this.header.expertDomains
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤
    const domainMatches = requiredDomains.filter(domain => 
      nodeDomains.some(nodeDomain => 
        nodeDomain.toLowerCase().includes(domain.toLowerCase()) ||
        domain.toLowerCase().includes(nodeDomain.toLowerCase())
      )
    )
    
    if (domainMatches.length === 0) {
      return {
        compatible: false,
        confidence: 0,
        reason: `No domain overlap: required [${requiredDomains.join(', ')}], available [${nodeDomains.join(', ')}]`
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const maxNodeComplexity = Math.max(...Object.values(this.header.competenceMap)) * 10
    const taskComplexity = task.requirements?.complexity || 1
    if (taskComplexity > maxNodeComplexity) {
      return {
        compatible: false,
        confidence: 0,
        reason: `Task complexity ${taskComplexity} > node capability ${maxNodeComplexity.toFixed(1)}`
      }
    }
    
    // –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    const domainCoverage = domainMatches.length / requiredDomains.length
    const complexityFit = 1 - (taskComplexity / maxNodeComplexity)
    const confidence = (domainCoverage * 0.7) + (complexityFit * 0.3)
    
    return {
      compatible: true,
      confidence,
      reason: `Domain coverage: ${(domainCoverage * 100).toFixed(1)}%, complexity fit: ${(complexityFit * 100).toFixed(1)}%`
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å A2A –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–¥—ã
   */
  getHeader(): A2AHeader {
    return this.header
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Guard
   */
  getUsageStats(): {
    totalRequests: number
    allowedRequests: number
    rejectedRequests: number
    redirectedRequests: number
    totalCost: number
    avgProcessingTime: number
    successRate: number
  } {
    if (this.usageStats.totalRequests === 0) {
      return {
        totalRequests: 0,
        allowedRequests: 0,
        rejectedRequests: 0,
        redirectedRequests: 0,
        totalCost: 0,
        avgProcessingTime: 0,
        successRate: 100
      }
    }

    return {
      ...this.usageStats,
      avgProcessingTime: this.usageStats.totalProcessingTime / this.usageStats.totalRequests,
      successRate: (this.usageStats.allowedRequests / this.usageStats.totalRequests) * 100
    }
  }

  /**
   * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  resetUsageStats(): void {
    this.usageStats = {
      totalRequests: 0,
      allowedRequests: 0,
      rejectedRequests: 0,
      redirectedRequests: 0,
      totalCost: 0,
      totalProcessingTime: 0
    }
  }

  private usageStats = {
    totalRequests: 0,
    allowedRequests: 0,
    rejectedRequests: 0,
    redirectedRequests: 0,
    totalCost: 0,
    totalProcessingTime: 0
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI –º–æ–¥–µ–ª–∏
   */
  private parseAIResponse(text: string): Omit<GuardDecision, 'processingTime' | 'cost'> {
    try {
      const result = JSON.parse(text)
      
      return {
        action: this.validateAction(result.action || result.decision),
        confidence: Math.max(0, Math.min(1, result.confidence || 0)),
        reasoning: result.reasoning || 'No reasoning provided',
        contextMatchScore: Math.max(0, Math.min(100, result.contextMatchScore || result.context_match_score || 0)),
        missingCapabilities: Array.isArray(result.missingCapabilities || result.missing_capabilities) ? 
                           (result.missingCapabilities || result.missing_capabilities) : [],
        suggestedNodeType: result.suggestedNodeType || result.suggested_node_type
      }
    } catch (error) {
      console.error('Failed to parse AI response:', error)
      return {
        action: 'redirect',
        confidence: 0.1,
        reasoning: 'Failed to parse AI response',
        contextMatchScore: 0,
        missingCapabilities: ['parsing-error'],
        suggestedNodeType: 'oracle'
      }
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private calculateCost(tokens: number): number {
    // GPT-4o-mini pricing: $0.00015 / 1K input tokens, $0.0006 / 1K output tokens
    // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    return (tokens / 1000) * 0.0003
  }
} 