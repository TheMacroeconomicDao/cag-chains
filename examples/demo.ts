import { CAGNode } from '@cag-chains/core/node/CAGNode'
import { Oracle } from '@cag-chains/core/oracle/Oracle'

// Demo: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CAG-Chain —Å–∏—Å—Ç–µ–º—ã
async function demonstrateCAGChain() {
  console.log('üöÄ CAG-Chain System Demo - 2025 Edition')
  console.log('==========================================\n')

  // ==================== STEP 1: –°–û–ó–î–ê–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–• –£–ó–õ–û–í ====================
  
  console.log('üì¶ –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ CAG-Nodes...')
  
  const frontendExpert = new CAGNode({
    domain: 'frontend',
    subdomains: ['react', 'nextjs', 'typescript', 'ui/ux'],
    nodeType: 'medium',
    expertiseLevel: 0.9,
    openaiApiKey: process.env.OPENAI_API_KEY!
  })

  const backendExpert = new CAGNode({
    domain: 'backend',
    subdomains: ['api', 'database', 'microservices', 'security'],
    nodeType: 'large',
    expertiseLevel: 0.85,
    openaiApiKey: process.env.OPENAI_API_KEY!
  })

  const aiExpert = new CAGNode({
    domain: 'ai',
    subdomains: ['machine-learning', 'nlp', 'vector-search', 'embeddings'],
    nodeType: 'xlarge',
    expertiseLevel: 0.95,
    openaiApiKey: process.env.OPENAI_API_KEY!
  })

  const devopsExpert = new CAGNode({
    domain: 'devops',
    subdomains: ['docker', 'kubernetes', 'cicd', 'monitoring'],
    nodeType: 'medium',
    expertiseLevel: 0.8,
    openaiApiKey: process.env.OPENAI_API_KEY!
  })

  // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —É–∑–ª–æ–≤
  await new Promise(resolve => setTimeout(resolve, 3000))
  
  console.log(`‚úÖ Frontend Expert: ${frontendExpert.getState().domain} (${frontendExpert.getStatus()})`)
  console.log(`‚úÖ Backend Expert: ${backendExpert.getState().domain} (${backendExpert.getStatus()})`)
  console.log(`‚úÖ AI Expert: ${aiExpert.getState().domain} (${aiExpert.getStatus()})`)
  console.log(`‚úÖ DevOps Expert: ${devopsExpert.getState().domain} (${devopsExpert.getStatus()})\n`)

  // ==================== STEP 2: –°–û–ó–î–ê–ù–ò–ï ORACLE ====================
  
  console.log('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Oracle...')
  
  const oracle = new Oracle({
    optimizationStrategy: 'balanced',
    maxChainSize: 10,
    maxConcurrentChains: 100,
    nodeDiscoveryTimeout: 5000,
    taskTimeout: 300000
  })

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–∑–ª—ã –≤ Oracle
  oracle.registerNode(frontendExpert.getState())
  oracle.registerNode(backendExpert.getState())
  oracle.registerNode(aiExpert.getState())
  oracle.registerNode(devopsExpert.getState())
  
  console.log('‚úÖ Oracle –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n')

  // ==================== STEP 3: –°–õ–û–ñ–ù–ê–Ø –ó–ê–î–ê–ß–ê ====================
  
  console.log('üéØ –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞—Ç—å AI-powered –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
  
  const complexTask = `
–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI:

1. Frontend: React + Next.js –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
2. Backend: API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞  
3. AI: –°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è embeddings –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
4. DevOps: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ production

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI —Å real-time –ø–æ–∏—Å–∫–æ–º
- RESTful API —Å OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
- Vector database –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è embeddings
- JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- Docker + Kubernetes –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
- Comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- Monitoring –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
`

  // ==================== STEP 4: –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò ORACLE ====================
  
  console.log('üîç Oracle –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É...')
  
  try {
    const oracleResponse = await oracle.processRequest(complexTask, {
      priority: 'high',
      timeline: 'urgent',
      budget: 'medium'
    })

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:')
    console.log('======================')
    console.log(`–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${oracleResponse.analysis.complexity}/10`)
    console.log(`–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–º–µ–Ω—ã: ${oracleResponse.analysis.requiredDomains.join(', ')}`)
    console.log(`–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: ${oracleResponse.analysis.decomposition.length} –ø–æ–¥–∑–∞–¥–∞—á`)
    console.log(`–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑—É–µ–º–æ—Å—Ç—å: ${oracleResponse.analysis.parallelizable ? '–î–∞' : '–ù–µ—Ç'}`)
    console.log(`–û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: ${oracleResponse.analysis.estimatedTokens}`)

    console.log('\n‚ö° –ü–õ–ê–ù –í–´–ü–û–õ–ù–ï–ù–ò–Ø:')
    console.log('==================')
    console.log(`–¢–æ–ø–æ–ª–æ–≥–∏—è: ${oracleResponse.plan.topology}`)
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: ${oracleResponse.plan.tasks.length}`)
    console.log(`–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${oracleResponse.plan.estimatedCost} —Ç–æ–∫–µ–Ω–æ–≤`)
    console.log(`–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${Math.round(oracleResponse.plan.estimatedDuration / 1000)}—Å`)
    console.log(`–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(oracleResponse.plan.confidence * 100).toFixed(1)}%`)

    console.log('\nüìù –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–Ø –ó–ê–î–ê–ß:')
    console.log('=====================')
    oracleResponse.analysis.decomposition.forEach((subtask, index) => {
      console.log(`${index + 1}. ${subtask.description}`)
      console.log(`   –î–æ–º–µ–Ω: ${subtask.domain} | –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${subtask.complexity}/10`)
      if (subtask.dependencies.length > 0) {
        console.log(`   –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${subtask.dependencies.join(', ')}`)
      }
    })

    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
    console.log('================')
    oracleResponse.recommendations.forEach((rec, index) => {
      console.log(`${index + 1}. ${rec}`)
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Oracle:', error)
    return
  }

  // ==================== STEP 5: –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–û–î–ó–ê–î–ê–ß ====================
  
  console.log('\nüî• –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–û–î–ó–ê–î–ê–ß:')
  console.log('======================')

  // Frontend –∑–∞–¥–∞—á–∞
  console.log('\nüé® –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞...')
  const frontendTask = {
    id: 'frontend-task',
    type: 'implementation',
    description: '–°–æ–∑–¥–∞—Ç—å React + Next.js –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å real-time —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é',
    requirements: {
      domains: ['frontend'],
      complexity: 7,
      timeConstraint: 120000, // 2 –º–∏–Ω—É—Ç—ã
      qualityTarget: 0.85
    },
    dependencies: [],
    context: {
      framework: 'Next.js 15',
      styling: 'Tailwind CSS 4.0',
      features: ['file-upload', 'real-time-search', 'responsive-design']
    },
    createdAt: new Date(),
    updatedAt: new Date()
  }

  const frontendResult = await frontendExpert.processTask(frontendTask)
  
  console.log(`‚úÖ Frontend: ${frontendResult.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`)
  console.log(`   –¢–æ–∫–µ–Ω—ã: ${frontendResult.tokensUsed}`)
  console.log(`   –í—Ä–µ–º—è: ${Math.round(frontendResult.responseTime / 1000)}—Å`)
  console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${(frontendResult.qualityScore * 100).toFixed(1)}%`)

  // Backend –∑–∞–¥–∞—á–∞
  console.log('\nüîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞...')
  const backendTask = {
    id: 'backend-task',
    type: 'implementation',
    description: '–°–æ–∑–¥–∞—Ç—å API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π',
    requirements: {
      domains: ['backend'],
      complexity: 8,
      timeConstraint: 150000, // 2.5 –º–∏–Ω—É—Ç—ã
      qualityTarget: 0.9
    },
    dependencies: [],
    context: {
      framework: 'Hono + Bun',
      database: 'PostgreSQL + Drizzle',
      auth: 'JWT',
      api: 'OpenAPI 3.0'
    },
    createdAt: new Date(),
    updatedAt: new Date()
  }

  const backendResult = await backendExpert.processTask(backendTask)
  
  console.log(`‚úÖ Backend: ${backendResult.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`)
  console.log(`   –¢–æ–∫–µ–Ω—ã: ${backendResult.tokensUsed}`)
  console.log(`   –í—Ä–µ–º—è: ${Math.round(backendResult.responseTime / 1000)}—Å`)
  console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${(backendResult.qualityScore * 100).toFixed(1)}%`)

  // AI –∑–∞–¥–∞—á–∞
  console.log('\nü§ñ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞...')
  const aiTask = {
    id: 'ai-task',
    type: 'implementation',
    description: '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å embeddings –∏ vector database',
    requirements: {
      domains: ['ai'],
      complexity: 9,
      timeConstraint: 180000, // 3 –º–∏–Ω—É—Ç—ã
      qualityTarget: 0.95
    },
    dependencies: ['backend-task'],
    context: {
      embeddings: 'OpenAI text-embedding-3-large',
      vectorDB: 'Pinecone',
      similarity: 'cosine',
      preprocessing: 'chunking + metadata'
    },
    createdAt: new Date(),
    updatedAt: new Date()
  }

  const aiResult = await aiExpert.processTask(aiTask)
  
  console.log(`‚úÖ AI: ${aiResult.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`)
  console.log(`   –¢–æ–∫–µ–Ω—ã: ${aiResult.tokensUsed}`)
  console.log(`   –í—Ä–µ–º—è: ${Math.round(aiResult.responseTime / 1000)}—Å`)
  console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${(aiResult.qualityScore * 100).toFixed(1)}%`)

  // DevOps –∑–∞–¥–∞—á–∞
  console.log('\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: DevOps –Ω–∞—Å—Ç—Ä–æ–π–∫–∞...')
  const devopsTask = {
    id: 'devops-task',
    type: 'implementation',
    description: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD pipeline —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º',
    requirements: {
      domains: ['devops'],
      complexity: 6,
      timeConstraint: 90000, // 1.5 –º–∏–Ω—É—Ç—ã
      qualityTarget: 0.8
    },
    dependencies: ['frontend-task', 'backend-task', 'ai-task'],
    context: {
      containerization: 'Docker + Docker Compose',
      orchestration: 'Kubernetes',
      cicd: 'GitHub Actions',
      monitoring: 'Prometheus + Grafana'
    },
    createdAt: new Date(),
    updatedAt: new Date()
  }

  const devopsResult = await devopsExpert.processTask(devopsTask)
  
  console.log(`‚úÖ DevOps: ${devopsResult.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`)
  console.log(`   –¢–æ–∫–µ–Ω—ã: ${devopsResult.tokensUsed}`)
  console.log(`   –í—Ä–µ–º—è: ${Math.round(devopsResult.responseTime / 1000)}—Å`)
  console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${(devopsResult.qualityScore * 100).toFixed(1)}%`)

  // ==================== STEP 6: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê ====================
  
  console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:')
  console.log('======================')

  const totalTokens = frontendResult.tokensUsed + backendResult.tokensUsed + 
                     aiResult.tokensUsed + devopsResult.tokensUsed
  const totalTime = frontendResult.responseTime + backendResult.responseTime + 
                   aiResult.responseTime + devopsResult.responseTime
  const avgQuality = (frontendResult.qualityScore + backendResult.qualityScore + 
                     aiResult.qualityScore + devopsResult.qualityScore) / 4

  console.log(`–û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${totalTokens}`)
  console.log(`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.round(totalTime / 1000)}—Å`)
  console.log(`–°—Ä–µ–¥–Ω—è—è –∫–∞—á–µ—Å—Ç–≤–æ: ${(avgQuality * 100).toFixed(1)}%`)
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å single-model –ø–æ–¥—Ö–æ–¥–æ–º
  const singleModelEstimate = 8000 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
  const tokenSavings = ((singleModelEstimate - totalTokens) / singleModelEstimate * 100)
  
  console.log(`\nüí∞ –≠–ö–û–ù–û–ú–ò–Ø VS SINGLE-MODEL:`)
  console.log(`–¢–æ–∫–µ–Ω—ã —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω—ã: ${(tokenSavings > 0 ? tokenSavings : 0).toFixed(1)}%`)
  console.log(`–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–∞: $${((singleModelEstimate - totalTokens) * 0.002).toFixed(2)}`)

  // –ú–µ—Ç—Ä–∏–∫–∏ —É–∑–ª–æ–≤
  console.log(`\nüîß –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –£–ó–õ–û–í:`)
  console.log('============================')
  
  const nodes = [
    { name: 'Frontend Expert', node: frontendExpert },
    { name: 'Backend Expert', node: backendExpert },
    { name: 'AI Expert', node: aiExpert },
    { name: 'DevOps Expert', node: devopsExpert }
  ]

  for (const { name, node } of nodes) {
    const metrics = node.getPerformanceMetrics()
    console.log(`${name}:`)
    console.log(`  Context Usage: ${(metrics.contextUsage * 100).toFixed(1)}%`)
    console.log(`  Efficiency: ${metrics.tokenEfficiency.toFixed(2)}`)
    console.log(`  Success Rate: ${(metrics.successRate * 100).toFixed(1)}%`)
    console.log(`  Connections: ${metrics.connections}`)
  }

  console.log('\nüéâ CAG-Chain –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  console.log('=====================================')
  console.log('–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞:')
  console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á')
  console.log('‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º')
  console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤')
  console.log('‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π')
  console.log('‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤')
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if (require.main === module) {
  demonstrateCAGChain().catch(console.error)
}

export { demonstrateCAGChain } 