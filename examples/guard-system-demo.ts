#!/usr/bin/env bun

/**
 * CAG-Chains Guard System Demo
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã PrecisionGuard –¥–ª—è –∑–∞—â–∏—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Chain Nodes
 */

import { CAGNode } from '../packages/core/src/node/CAGNode.js'
import { ChainNode } from '../packages/core/src/node/ChainNode.js'
import { QualityController } from '../packages/core/src/node/QualityController.js'
import type { Task } from '../packages/core/src/types/index.js'

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå OPENAI_API_KEY not found in environment')
  console.log('Please set your OpenAI API key:')
  console.log('export OPENAI_API_KEY="your-api-key-here"')
  process.exit(1)
}

async function runGuardSystemDemo() {
  console.log('üõ°Ô∏è CAG-Chains Guard System Demo\n')
  console.log('='.repeat(60))
  console.log('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Chain Nodes —á–µ—Ä–µ–∑ PrecisionGuard')
  console.log('='.repeat(60))
  console.log()

  try {
    // ==================== 1. –°–û–ó–î–ê–ù–ò–ï –≠–ö–°–ü–ï–†–¢–ù–û–ô –ù–û–î–´ ====================
    console.log('üéØ –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π CAG Node...\n')

    const frontendExpert = new CAGNode({
      domain: 'frontend',
      subdomains: ['react', 'typescript', 'css'],
      nodeType: 'medium',
      expertiseLevel: 0.9,
      openaiApiKey: process.env.OPENAI_API_KEY!
    })

    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000))

    console.log(`‚úÖ Frontend —ç–∫—Å–ø–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: ${frontendExpert.getState().id}`)
    console.log(`   –î–æ–º–µ–Ω—ã: ${frontendExpert.getState().domain}, ${frontendExpert.getState().subdomains.join(', ')}`)
    console.log(`   –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: ${(frontendExpert.getState().expertiseLevel * 100).toFixed(1)}%`)
    console.log()

    // ==================== 2. –ë–õ–û–ö–ò–†–û–í–ö–ê –í CHAIN NODE ====================
    console.log('üîí –≠—Ç–∞–ø 2: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ Chain Node —Å Guard –∑–∞—â–∏—Ç–æ–π...\n')

    const qualityController = new QualityController()
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º (–¥–ª—è –¥–µ–º–æ)
    const chainNode = await qualityController.lockAsChainNode(frontendExpert, {
      qualityRequirements: [
        {
          metric: 'successRate',
          threshold: 0.8,
          evaluationPeriod: 60000
        }
      ],
      performanceGuarantees: [
        {
          metric: 'responseTime',
          maxValue: 5000,
          confidence: 0.9,
          basedOnSamples: 10
        }
      ],
      reusabilityRights: {
        isPublic: true,
        isCommercial: false,
        licenseType: 'open',
        restrictions: []
      }
    })

    console.log(`üîí Chain Node –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${chainNode.getId()}`)
    console.log(`   –ó–∞—â–∏—â–µ–Ω PrecisionGuard —Å A2A –∑–∞–≥–æ–ª–æ–≤–∫–æ–º`)
    console.log(`   –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: ${JSON.stringify(chainNode.getMetadata().contextSnapshot.domains)}`)
    console.log()

    // ==================== 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GUARD –§–ò–õ–¨–¢–†–ê–¶–ò–ò ====================
    console.log('üß™ –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Guard —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...\n')

    // –¢–µ—Å—Ç 1: –ü–æ–¥—Ö–æ–¥—è—â–∞—è –∑–∞–¥–∞—á–∞ (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏)
    console.log('üìã –¢–µ—Å—Ç 1: –ü–æ–¥—Ö–æ–¥—è—â–∞—è React –∑–∞–¥–∞—á–∞')
    const validTask: Task = {
      id: crypto.randomUUID(),
      type: 'component_creation',
      description: '–°–æ–∑–¥–∞–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TypeScript —Ç–∏–ø–∞–º–∏',
      requirements: {
        domains: ['frontend', 'react'],
        complexity: 4,
        qualityTarget: 0.8
      },
      dependencies: [],
      context: { framework: 'React', language: 'TypeScript' },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    try {
      const result1 = await chainNode.executeOptimized(validTask)
      console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result1.success ? '–£—Å–ø–µ—Ö' : '–ù–µ—É–¥–∞—á–∞'}`)
      if (result1.success) {
        console.log(`   üìä –ö–∞—á–µ—Å—Ç–≤–æ: ${(result1.qualityScore || 0 * 100).toFixed(1)}%`)
        console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è: ${result1.responseTime}ms`)
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result1.error}`)
      }
    } catch (error) {
      console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error}`)
    }
    console.log()

    // –¢–µ—Å—Ç 2: –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è –∑–∞–¥–∞—á–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞)
    console.log('üìã –¢–µ—Å—Ç 2: –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è Backend –∑–∞–¥–∞—á–∞')
    const invalidTask: Task = {
      id: crypto.randomUUID(),
      type: 'database_optimization',
      description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π PostgreSQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
      requirements: {
        domains: ['backend', 'database'],
        complexity: 7,
        qualityTarget: 0.9
      },
      dependencies: [],
      context: { database: 'PostgreSQL' },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    try {
      const result2 = await chainNode.executeOptimized(invalidTask)
      console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result2.success ? '–£—Å–ø–µ—Ö' : '–ù–µ—É–¥–∞—á–∞'}`)
      if (!result2.success) {
        console.log(`   üõ°Ô∏è Guard —Å—Ä–∞–±–æ—Ç–∞–ª: ${result2.error}`)
      }
    } catch (error) {
      console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error}`)
    }
    console.log()

    // –¢–µ—Å—Ç 3: –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞)
    console.log('üìã –¢–µ—Å—Ç 3: –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞')
    const complexTask: Task = {
      id: crypto.randomUUID(),
      type: 'architecture_design',
      description: '–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è enterprise —Å–∏—Å—Ç–µ–º—ã —Å React frontend',
      requirements: {
        domains: ['frontend', 'architecture'],
        complexity: 10,
        qualityTarget: 0.95
      },
      dependencies: [],
      context: { scale: 'enterprise' },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    try {
      const result3 = await chainNode.executeOptimized(complexTask)
      console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result3.success ? '–£—Å–ø–µ—Ö' : '–ù–µ—É–¥–∞—á–∞'}`)
      if (!result3.success) {
        console.log(`   üîÑ Guard —Ä–µ—à–µ–Ω–∏–µ: ${result3.error}`)
      }
    } catch (error) {
      console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error}`)
    }
    console.log()

    // –¢–µ—Å—Ç 4: –ó–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É—é—â–∞—è –∏–∑—É—á–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞)
    console.log('üìã –¢–µ—Å—Ç 4: –ó–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É—é—â–∞—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏')
    const learningTask: Task = {
      id: crypto.randomUUID(),
      type: 'learning_task',
      description: '–ò–∑—É—á–∏ –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ Vue 4 –∏ —Å–æ–∑–¥–∞–π —Å –Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç',
      requirements: {
        domains: ['frontend'],
        complexity: 5,
        qualityTarget: 0.8
      },
      dependencies: [],
      context: { learning_required: true },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    try {
      const result4 = await chainNode.executeOptimized(learningTask)
      console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result4.success ? '–£—Å–ø–µ—Ö' : '–ù–µ—É–¥–∞—á–∞'}`)
      if (!result4.success) {
        console.log(`   üö´ Guard –æ—Ç–∫–ª–æ–Ω–∏–ª: ${result4.error}`)
      }
    } catch (error) {
      console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error}`)
    }
    console.log()

    // ==================== 4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê GUARD ====================
    console.log('üìä –≠—Ç–∞–ø 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Guard —Å–∏—Å—Ç–µ–º—ã...\n')

    const usageStats = chainNode.getUsageStats()
    console.log(`üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π Chain Node: ${usageStats.count}`)
    console.log(`üí∞ –î–æ—Ö–æ–¥: $${usageStats.revenue}`)
    console.log(`üõ°Ô∏è Guard —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞—â–∏—Ç–∏–ª –æ—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á`)
    console.log()

    console.log('üéâ –î–µ–º–æ Guard —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    console.log('\nüìà –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:')
    console.log('   ‚úÖ PrecisionGuard —É—Å–ø–µ—à–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏')
    console.log('   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞—â–∏—â–µ–Ω –æ—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤')
    console.log('   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ')
    console.log('   ‚úÖ Nano-–º–æ–¥–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
    console.log('   ‚úÖ –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ Guard —Å–∏—Å—Ç–µ–º—ã:', error)
    if (error instanceof Error) {
      console.error('–î–µ—Ç–∞–ª–∏:', error.message)
      console.error('Stack:', error.stack)
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
runGuardSystemDemo().catch(console.error) 