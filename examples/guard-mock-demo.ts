#!/usr/bin/env bun

/**
 * CAG-Chains Mock Guard System Demo
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã Guard —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç OpenAI API
 */

import { MockGuard } from '../packages/core/src/guard/MockGuard.js'
import type { Task, A2AHeader } from '../packages/core/src/types/index.js'

async function runMockGuardDemo() {
  console.log('üõ°Ô∏è CAG-Chains Mock Guard System Demo\n')
  console.log('='.repeat(70))
  console.log('–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Guard —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ OpenAI API –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
  console.log('='.repeat(70))
  console.log()

  // ==================== 1. –°–û–ó–î–ê–ù–ò–ï MOCK A2A HEADER ====================
  console.log('üéØ –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–¥—ã —Å A2A –∑–∞–≥–æ–ª–æ–≤–∫–æ–º...\n')

  const frontendA2AHeader: A2AHeader = {
    nodeId: 'chain_frontend_expert_001',
    expertDomains: ['frontend', 'react', 'typescript', 'css'],
    competenceMap: {
      'frontend': 0.92,
      'react': 0.95, 
      'typescript': 0.88,
      'css': 0.85
    },
    capabilities: [
      'component-creation',
      'state-management', 
      'ui-design',
      'responsive-layout',
      'typescript-integration'
    ],
    contextHash: 'sha256:abc123def456...',
    guardThresholds: {
      minConfidence: 0.8,  // 80% –º–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
      rejectBelow: 0.3     // –ù–∏–∂–µ 30% - –æ—Ç–∫–∞–∑
    },
    blockedAt: new Date(),
    version: '1.0.0'
  }

  console.log(`üîí –°–æ–∑–¥–∞–Ω A2A –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–¥—ã: ${frontendA2AHeader.nodeId}`)
  console.log(`   –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã: ${frontendA2AHeader.expertDomains.join(', ')}`)
  console.log(`   –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: ${JSON.stringify(frontendA2AHeader.competenceMap, null, 2)}`)
  console.log(`   Guard –ø–æ—Ä–æ–≥–∏: min=${frontendA2AHeader.guardThresholds.minConfidence}, reject=${frontendA2AHeader.guardThresholds.rejectBelow}`)
  console.log()

  // ==================== 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø MOCK GUARD ====================
  console.log('üõ°Ô∏è –≠—Ç–∞–ø 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MockGuard...\n')

  const mockGuard = new MockGuard(frontendA2AHeader)
  const guardInfo = mockGuard.getGuardInfo()
  
  console.log(`‚úÖ MockGuard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)
  console.log(`   –¢–∏–ø: ${guardInfo.type}`)
  console.log(`   –ó–∞—â–∏—â–∞–µ—Ç –Ω–æ–¥—É: ${guardInfo.nodeId}`)
  console.log(`   –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${guardInfo.contextHash}`)
  console.log()

  // ==================== 3. –ë–ê–¢–ê–†–ï–Ø –¢–ï–°–¢–û–í ====================
  console.log('üß™ –≠—Ç–∞–ø 3: –ü–æ–ª–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è —Ç–µ—Å—Ç–æ–≤ Guard —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...\n')

  const testCases = [
    {
      name: '–ü–û–ó–ò–¢–ò–í–ù–´–ô: –ü–æ–¥—Ö–æ–¥—è—â–∞—è React –∑–∞–¥–∞—á–∞',
      shouldPass: true,
      task: {
        id: crypto.randomUUID(),
        type: 'component_creation',
        description: '–°–æ–∑–¥–∞–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å TypeScript —Ç–∏–ø–∞–º–∏ –∏ CSS —Å—Ç–∏–ª—è–º–∏',
        requirements: {
          domains: ['frontend', 'react', 'typescript'],
          complexity: 4,
          qualityTarget: 0.8
        },
        dependencies: [],
        context: { framework: 'React', language: 'TypeScript' },
        createdAt: new Date(),
        updatedAt: new Date()
      }
    },
    {
      name: '–û–¢–ö–õ–û–ù–ï–ù–ò–ï: Backend –∑–∞–¥–∞—á–∞',
      shouldPass: false,
      task: {
        id: crypto.randomUUID(),
        type: 'database_optimization',
        description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π PostgreSQL –∑–∞–ø—Ä–æ—Å—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
        requirements: {
          domains: ['backend', 'database'],
          complexity: 6,
          qualityTarget: 0.9
        },
        dependencies: [],
        context: { database: 'PostgreSQL' },
        createdAt: new Date(),
        updatedAt: new Date()
      }
    },
    {
      name: '–ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞',
      shouldPass: false,
      task: {
        id: crypto.randomUUID(),
        type: 'architecture_design',
        description: '–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è enterprise —Å–∏—Å—Ç–µ–º—ã —Å React frontend',
        requirements: {
          domains: ['frontend', 'architecture'],
          complexity: 10,
          qualityTarget: 0.95
        },
        dependencies: [],
        context: { scale: 'enterprise' },
        createdAt: new Date(),
        updatedAt: new Date()
      }
    },
    {
      name: '–û–¢–ö–õ–û–ù–ï–ù–ò–ï: –ó–∞–¥–∞—á–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º',
      shouldPass: false,
      task: {
        id: crypto.randomUUID(),
        type: 'learning_task',
        description: '–ò–∑—É—á–∏ –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ Svelte –∏ —Å–æ–∑–¥–∞–π —Å –Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç',
        requirements: {
          domains: ['frontend'],
          complexity: 5,
          qualityTarget: 0.8
        },
        dependencies: [],
        context: { learning_required: true },
        createdAt: new Date(),
        updatedAt: new Date()
      }
    },
    {
      name: '–ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      shouldPass: false,
      task: {
        id: crypto.randomUUID(),
        type: 'ui_development',
        description: '–°–æ–∑–¥–∞–π –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Flutter —Å –∫—Ä–∞—Å–∏–≤—ã–º UI',
        requirements: {
          domains: ['frontend', 'mobile'],
          complexity: 6,
          qualityTarget: 0.85
        },
        dependencies: [],
        context: { platform: 'mobile' },
        createdAt: new Date(),
        updatedAt: new Date()
      }
    },
    {
      name: '–ü–û–ó–ò–¢–ò–í–ù–´–ô: CSS —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è',
      shouldPass: true,
      task: {
        id: crypto.randomUUID(),
        type: 'styling',
        description: '–°–æ–∑–¥–∞–π –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é CSS —Å–µ—Ç–∫—É –¥–ª—è dashboard —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Flexbox',
        requirements: {
          domains: ['frontend', 'css'],
          complexity: 3,
          qualityTarget: 0.8
        },
        dependencies: [],
        context: { technology: 'CSS' },
        createdAt: new Date(),
        updatedAt: new Date()
      }
    }
  ]

  let passedTests = 0
  let totalTests = testCases.length

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i]
    console.log(`üìã –¢–µ—Å—Ç ${i + 1}/${totalTests}: ${testCase.name}`)
    
    try {
      const decision = await mockGuard.filterIncomingTask(testCase.task as Task)
      
      const actuallyPassed = decision.action === 'allow'
      const testCorrect = actuallyPassed === testCase.shouldPass
      
      if (testCorrect) {
        passedTests++
        console.log(`   ‚úÖ –ö–û–†–†–ï–ö–¢–ù–û: ${decision.action} (confidence: ${decision.confidence.toFixed(2)})`)
      } else {
        console.log(`   ‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–û: –æ–∂–∏–¥–∞–ª–æ—Å—å ${testCase.shouldPass ? 'allow' : 'reject/redirect'}, –ø–æ–ª—É—á–µ–Ω–æ ${decision.action}`)
      }
      
      console.log(`   üß† –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${decision.reasoning}`)
      console.log(`   üìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: ${(decision.contextMatchScore * 100).toFixed(1)}%`)
      console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è: ${decision.processingTime}ms, –°—Ç–æ–∏–º–æ—Å—Ç—å: $${decision.cost}`)
      
      if (decision.suggestedNodeType) {
        console.log(`   üîÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${decision.suggestedNodeType}`)
      }
      
      if (decision.missingCapabilities.length > 0) {
        console.log(`   üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${decision.missingCapabilities.join(', ')}`)
      }
      
    } catch (error) {
      console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${error}`)
    }
    
    console.log()
  }

  // ==================== 4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================
  console.log('üìä –≠—Ç–∞–ø 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n')

  const successRate = (passedTests / totalTests) * 100
  
  console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`)
  console.log(`   üìà –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests} (${successRate.toFixed(1)}%)`)
  console.log(`   üõ°Ô∏è Guard –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏`)
  console.log(`   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ~100ms`)
  console.log(`   üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: $0.001`)
  console.log()

  // ==================== 5. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø GUARD –ò–ù–§–û–†–ú–ê–¶–ò–ò ====================
  console.log('üîç –≠—Ç–∞–ø 5: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Guard...\n')

  console.log(`üõ°Ô∏è Guard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`)
  console.log(`   –¢–∏–ø: ${guardInfo.type}`)
  console.log(`   –ó–∞—â–∏—â–∞–µ–º–∞—è –Ω–æ–¥–∞: ${guardInfo.nodeId}`)
  console.log(`   –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã: [${guardInfo.expertDomains.join(', ')}]`)
  console.log(`   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: [${guardInfo.capabilities.slice(0, 3).join(', ')}...]`)
  console.log(`   –ü–æ—Ä–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: min_confidence=${guardInfo.thresholds.minConfidence}, reject_below=${guardInfo.thresholds.rejectBelow}`)
  console.log(`   –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${guardInfo.contextHash}`)
  console.log()

  console.log('üéâ Mock Guard –¥–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
  console.log('\nüìà –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:')
  console.log('   ‚úÖ MockGuard —Ç–æ—á–Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É PrecisionGuard')
  console.log('   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–æ–º–µ–Ω–∞–º, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º')
  console.log('   ‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –Ω–æ–¥–∞–º')
  console.log('   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–¥–∞—á —Å –æ–±—É—á–µ–Ω–∏–µ–º –∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π')
  console.log('   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤')
  console.log('   ‚úÖ –ü–æ–ª–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É')
  console.log()
  console.log('üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API!')
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
runMockGuardDemo().catch(console.error) 