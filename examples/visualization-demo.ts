#!/usr/bin/env bun

/**
 * CAG-Chains Visualization Demo
 * –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
 */

import { MockGuard } from '../packages/core/src/guard/MockGuard.js'
import { systemVisualizer } from '../packages/core/src/visualization/SystemVisualizer.js'
import { terminalVisualizer } from '../packages/core/src/visualization/TerminalVisualizer.js'
import type { Task, A2AHeader, VisualizationEvent } from '../packages/core/src/types/index.js'

async function runVisualizationDemo() {
  console.log('üé® CAG-Chains Visualization System Demo\\n')
  console.log('='.repeat(70))
  console.log('–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–∂–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è')
  console.log('='.repeat(70))
  console.log()

  // ==================== 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ ====================
  console.log('üöÄ –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...\\n')

  // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const nodeHeaders: A2AHeader[] = [
    {
      nodeId: 'chain_frontend_expert_001',
      expertDomains: ['frontend', 'react', 'typescript'],
      competenceMap: { 'frontend': 0.92, 'react': 0.95, 'typescript': 0.88 },
      capabilities: ['component-creation', 'state-management', 'ui-design'],
      contextHash: 'sha256:frontend_context_hash',
      guardThresholds: { minConfidence: 0.8, rejectBelow: 0.3 },
      blockedAt: new Date(),
      version: '1.0.0'
    },
    {
      nodeId: 'chain_backend_expert_002',
      expertDomains: ['backend', 'nodejs', 'database'],
      competenceMap: { 'backend': 0.89, 'nodejs': 0.91, 'database': 0.87 },
      capabilities: ['api-development', 'database-optimization', 'server-architecture'],
      contextHash: 'sha256:backend_context_hash',
      guardThresholds: { minConfidence: 0.8, rejectBelow: 0.3 },
      blockedAt: new Date(),
      version: '1.0.0'
    },
    {
      nodeId: 'oracle_task_distributor',
      expertDomains: ['orchestration', 'planning', 'routing'],
      competenceMap: { 'orchestration': 0.95, 'planning': 0.93, 'routing': 0.90 },
      capabilities: ['task-analysis', 'chain-planning', 'load-balancing'],
      contextHash: 'sha256:oracle_context_hash',
      guardThresholds: { minConfidence: 0.7, rejectBelow: 0.2 },
      blockedAt: new Date(),
      version: '1.0.0'
    }
  ]

  // –°–æ–∑–¥–∞–µ–º Guards –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–¥—ã
  const guards = nodeHeaders.map(header => ({
    header,
    guard: new MockGuard(header)
  }))

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${guards.length} Guard'–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏`)
  console.log(`‚úÖ SystemVisualizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)
  console.log(`‚úÖ TerminalVisualizer –≥–æ—Ç–æ–≤ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é\\n`)

  // ==================== 2. –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ù–û–î ====================
  console.log('üß† –≠—Ç–∞–ø 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥...\\n')

  guards.forEach(({ header }) => {
    systemVisualizer.logEvent({
      type: 'node_creation',
      nodeId: header.nodeId,
      details: {
        domains: header.expertDomains,
        capabilities: header.capabilities,
        competenceMap: header.competenceMap
      },
      performance: {
        duration: Math.random() * 50 + 10, // 10-60ms
        cost: 0.0001,
        success: true
      }
    })
  })

  // –õ–æ–≥–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Chain –Ω–æ–¥
  guards.filter(g => g.header.nodeId.includes('chain_')).forEach(({ header }) => {
    systemVisualizer.logEvent({
      type: 'chain_lock',
      nodeId: header.nodeId,
      details: {
        lockingReason: 'Context filled to 65%',
        contextHash: header.contextHash,
        guardThresholds: header.guardThresholds
      },
      performance: {
        duration: 5,
        cost: 0,
        success: true
      }
    })
  })

  console.log('‚úÖ –°–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\\n')

  // ==================== 3. –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–î–ê–ß –ò GUARD –§–ò–õ–¨–¢–†–ê–¶–ò–ò ====================
  console.log('üõ°Ô∏è –≠—Ç–∞–ø 3: –°–∏–º—É–ª—è—Ü–∏—è Guard —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –º–µ–∂–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏...\\n')

  const testTasks: Task[] = [
    {
      id: 'task_001',
      description: '–°–æ–∑–¥–∞–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
      complexity: 4,
      requirements: ['frontend', 'react'],
      createdAt: new Date(),
      status: 'pending'
    },
    {
      id: 'task_002', 
      description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π PostgreSQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
      complexity: 7,
      requirements: ['backend', 'database'],
      createdAt: new Date(),
      status: 'pending'
    },
    {
      id: 'task_003',
      description: '–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è enterprise —Å–∏—Å—Ç–µ–º—ã',
      complexity: 10,
      requirements: ['architecture', 'microservices'],
      createdAt: new Date(),
      status: 'pending'
    },
    {
      id: 'task_004',
      description: '–°–æ–∑–¥–∞–π –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é CSS —Å–µ—Ç–∫—É –¥–ª—è dashboard',
      complexity: 3,
      requirements: ['frontend', 'css'],
      createdAt: new Date(),
      status: 'pending'
    }
  ]

  // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–º Guard'–æ–º
  for (const task of testTasks) {
    console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: "${task.description.substring(0, 40)}..."`)
    
    // Oracle –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É
    systemVisualizer.logCommunication({
      from: 'oracle_task_distributor',
      to: 'a2a_protocol',
      type: 'task_delegation',
      payload: {
        taskId: task.id,
        success: true,
        metadata: { complexity: task.complexity, requirements: task.requirements }
      }
    })

    for (const { header, guard } of guards) {
      if (header.nodeId.includes('chain_')) {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º A2A –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –∫ Chain Node
        systemVisualizer.logCommunication({
          from: 'a2a_protocol',
          to: header.nodeId,
          type: 'task_delegation',
          payload: {
            taskId: task.id,
            success: true,
            metadata: { routed_to: header.nodeId }
          }
        })

        // Guard –ø—Ä–æ–≤–µ—Ä–∫–∞
        const decision = await guard.filterIncomingTask(task)
        
        // –õ–æ–≥–∏—Ä—É–µ–º Guard —Å–æ–±—ã—Ç–∏–µ
        systemVisualizer.logEvent({
          type: 'guard_check',
          nodeId: header.nodeId,
          details: {
            taskId: task.id,
            decision: decision.action,
            confidence: decision.confidence,
            reasoning: decision.reasoning
          },
          performance: {
            duration: decision.processingTime,
            cost: decision.cost,
            success: decision.action !== 'reject'
          }
        })

        // –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º Guard —Ä–µ—à–µ–Ω–∏–µ
        terminalVisualizer.visualizeGuardDecision(
          header.nodeId,
          task.description,
          decision
        )

        // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Ç Guard'–∞
        if (decision.action === 'allow') {
          systemVisualizer.logCommunication({
            from: header.nodeId,
            to: 'task_executor',
            type: 'response',
            payload: {
              taskId: task.id,
              decision,
              success: true,
              metadata: { executed: true }
            }
          })
          terminalVisualizer.visualizeCommunicationFlow(
            header.nodeId, 'task_executor', 'response', true
          )
        } else if (decision.action === 'redirect') {
          systemVisualizer.logCommunication({
            from: header.nodeId,
            to: decision.suggestedNodeType || 'oracle_task_distributor',
            type: 'redirect',
            payload: {
              taskId: task.id,
              decision,
              success: true,
              metadata: { redirected: true }
            }
          })
          terminalVisualizer.visualizeCommunicationFlow(
            header.nodeId, decision.suggestedNodeType || 'oracle', 'redirect', true
          )
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 500))
      }
    }
    
    console.log('‚îÄ'.repeat(50))
  }

  // ==================== 4. –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï DASHBOARD ====================
  console.log('\\nüìä –≠—Ç–∞–ø 4: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ System Dashboard...\\n')
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—ã–π dashboard
  terminalVisualizer.displaySystemDashboard()
  
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  await new Promise(resolve => setTimeout(resolve, 3000))

  // ==================== 5. NETWORK DIAGRAM ====================
  console.log('\\nüåê –≠—Ç–∞–ø 5: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Network Topology...\\n')
  
  terminalVisualizer.displayNetworkDiagram()

  // ==================== 6. –≠–ö–°–ü–û–†–¢ –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• ====================
  console.log('\\nüìà –≠—Ç–∞–ø 6: –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...\\n')
  
  const analyticsData = systemVisualizer.exportAnalyticsData()
  
  console.log('üîç –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞:')
  console.log(`   –°–æ–±—ã—Ç–∏—è: ${analyticsData.events.length}`)
  console.log(`   –ù–æ–¥—ã: ${analyticsData.nodeStates.length}`) 
  console.log(`   –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: ${analyticsData.communications.length}`)
  console.log(`   –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: ${analyticsData.summary.systemOverview.systemHealth}%`)
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: ${analyticsData.summary.performanceMetrics.tasksProcessed}`)
  console.log(`   –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${analyticsData.summary.performanceMetrics.totalCost.toFixed(4)}`)

  // ==================== 7. LIVE MONITORING DEMO ====================
  console.log('\\nüöÄ –≠—Ç–∞–ø 7: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Live Monitoring (5 —Å–µ–∫—É–Ω–¥)...\\n')
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º live –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
  const stopMonitoring = terminalVisualizer.startLiveMonitoring(2000)
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  setTimeout(() => {
    systemVisualizer.logEvent({
      type: 'a2a_communication',
      nodeId: 'a2a_protocol',
      details: { message: 'System health check' },
      performance: { duration: 15, cost: 0.0001, success: true }
    })
  }, 1000)
  
  setTimeout(() => {
    systemVisualizer.logEvent({
      type: 'guard_check',
      nodeId: 'chain_frontend_expert_001',
      details: { message: 'Periodic validation' },
      performance: { duration: 25, cost: 0.001, success: true }
    })
  }, 3000)

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    stopMonitoring()
    console.log('\\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\\n')
    
    console.log('üìã –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:')
    console.log('   ‚úÖ Real-time —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    console.log('   ‚úÖ –ö—Ä–∞—Å–∏–≤—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã')
    console.log('   ‚úÖ Network topology –¥–∏–∞–≥—Ä–∞–º–º—ã')
    console.log('   ‚úÖ Guard —Ä–µ—à–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π')
    console.log('   ‚úÖ –ú–µ–∂–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è')
    console.log('   ‚úÖ Performance –º–µ—Ç—Ä–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞')
    console.log('   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞')
    console.log('   ‚úÖ Live –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã')
    
    console.log('\\nüí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!')
    
    process.exit(0)
  }, 5000)
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
runVisualizationDemo().catch(console.error) 